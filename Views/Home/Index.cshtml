@{
    ViewData["Title"] = "StormSafe - Weather Radar";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        .alert-level {
            padding: 0.5rem;
            border-radius: 0.25rem;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1rem;
        }

        .alert-watch {
            background-color: #fff3cd;
            color: #856404;
        }

        .alert-warning {
            background-color: #f8d7da;
            color: #721c24;
        }

        .alert-advisory {
            background-color: #cce5ff;
            color: #004085;
        }

        .storm-info-card {
            margin-bottom: 1rem;
        }

        .info-value {
            font-size: 1.25rem;
            font-weight: 500;
        }

        .info-label {
            color: #6c757d;
            font-size: 0.875rem;
        }

        .updating {
            opacity: 0.7;
            font-style: italic;
        }
    </style>
}

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Live Radar</h3>
            </div>
            <div class="card-body p-0">
                <div id="radar-container" style="height: 400px; background-color: #f8f9fa;">
                    <div id="map" style="height: 100%; width: 100%;"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Storm Information</h3>
            </div>
            <div class="card-body">
                <div id="storm-info">
                    <!-- Alert Level -->
                    <div class="alert-level" id="alert-level">
                        <span id="alert-text">No Active Alerts</span>
                    </div>

                    <!-- Storm Type and Description -->
                    <div class="storm-info-card">
                        <h5>Storm Type</h5>
                        <p id="storm-type" class="info-value">--</p>
                        <p id="storm-description" class="text-muted small">--</p>
                    </div>

                    <!-- Movement Information -->
                    <div class="storm-info-card">
                        <h5>Movement</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Speed</p>
                                <p id="storm-speed" class="info-value">-- mph</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Direction</p>
                                <p id="storm-direction" class="info-value">--°</p>
                            </div>
                        </div>
                    </div>

                    <!-- Wind Information -->
                    <div class="storm-info-card">
                        <h5>Wind Conditions</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Wind Speed</p>
                                <p id="wind-speed" class="info-value">-- mph</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Wind Gusts</p>
                                <p id="wind-gust" class="info-value">-- mph</p>
                            </div>
                        </div>
                    </div>

                    <!-- Precipitation -->
                    <div class="storm-info-card">
                        <h5>Precipitation</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Rate</p>
                                <p id="precipitation-rate" class="info-value">-- in/hr</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Visibility</p>
                                <p id="visibility" class="info-value">-- mi</p>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Hazards -->
                    <div class="storm-info-card">
                        <h5>Additional Hazards</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Hail Size</p>
                                <p id="hail-size" class="info-value">-- in</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Lightning</p>
                                <p id="lightning-status" class="info-value">--</p>
                            </div>
                        </div>
                    </div>

                    <!-- Arrival Information -->
                    <div class="storm-info-card">
                        <h5>Arrival Information</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Distance</p>
                                <p id="storm-distance" class="info-value">-- mi</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">ETA</p>
                                <p id="arrival-time" class="info-value">--:--</p>
                            </div>
                        </div>
                    </div>

                    <!-- Storm Intensity -->
                    <div class="storm-info-card">
                        <h5>Storm Intensity</h5>
                        <div class="progress">
                            <div id="storm-intensity" class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Initialize the map
        let map;
        let userMarker;
        let stormPathLayer;
        let weatherLayer;
        let updateInterval;
        let pathMarkers = []; // Array to store path markers

        function initMap() {
            // Create the map centered on a default location (can be updated with user's location)
            map = L.map('map').setView([39.8283, -98.5795], 4); // Center of USA

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Add weather overlay layer
            weatherLayer = L.tileLayer('https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=@ViewBag.OpenWeatherMapApiKey', {
                maxZoom: 19,
                attribution: '© OpenWeatherMap',
                opacity: 0.5
            });

            // Get user's location
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        const userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        map.setView([userLocation.lat, userLocation.lng], 8);

                        // Add a marker for user's location
                        if (userMarker) {
                            map.removeLayer(userMarker);
                        }
                        userMarker = L.marker([userLocation.lat, userLocation.lng])
                            .addTo(map)
                            .bindPopup('Your Location')
                            .openPopup();

                        // Start updating storm data
                        updateStormData(userLocation);
                        // Update every 5 minutes
                        updateInterval = setInterval(() => updateStormData(userLocation), 300000);
                    },
                    error => {
                        console.error('Error getting location:', error);
                    }
                );
            }
        }

        async function updateStormData(userLocation) {
            try {
                // Add updating class to all info values
                document.querySelectorAll('.info-value').forEach(el => el.classList.add('updating'));

                // Fetch storm data from our API
                const response = await fetch(`/api/weather/storm-data?latitude=${userLocation.lat}&longitude=${userLocation.lng}`);
                const data = await response.json();

                // Update alert level
                updateAlertLevel(data.alertLevel);

                // Update storm type and description
                document.getElementById('storm-type').textContent = data.stormType || '--';
                document.getElementById('storm-description').textContent = data.stormDescription || '--';

                // Update movement information
                document.getElementById('storm-speed').textContent = `${data.speed} mph`;
                document.getElementById('storm-direction').textContent = `${data.direction}°`;

                // Update wind information
                document.getElementById('wind-speed').textContent = `${data.windSpeed} mph`;
                document.getElementById('wind-gust').textContent = `${data.windGust} mph`;

                // Update precipitation
                document.getElementById('precipitation-rate').textContent = `${data.precipitationRate} in/hr`;
                document.getElementById('visibility').textContent = `${data.visibility} mi`;

                // Update additional hazards
                document.getElementById('hail-size').textContent = data.hailSize ? `${data.hailSize} in` : '--';
                document.getElementById('lightning-status').textContent = data.hasLightning ? 'Active' : 'None';

                // Update arrival information
                document.getElementById('storm-distance').textContent = `${data.distanceToUser} mi`;
                document.getElementById('arrival-time').textContent = new Date(data.estimatedArrivalTime).toLocaleTimeString();

                // Update storm intensity
                document.getElementById('storm-intensity').style.width = `${data.intensity}%`;

                // Update storm path on map
                updateStormPath(data.predictedPath);

                // Update weather overlay
                updateWeatherOverlay(data);

                // Remove updating class
                document.querySelectorAll('.info-value').forEach(el => el.classList.remove('updating'));
            } catch (error) {
                console.error('Error updating storm data:', error);
                // Remove updating class even if there's an error
                document.querySelectorAll('.info-value').forEach(el => el.classList.remove('updating'));
            }
        }

        function updateAlertLevel(level) {
            const alertElement = document.getElementById('alert-level');
            const alertText = document.getElementById('alert-text');

            // Remove all alert classes
            alertElement.classList.remove('alert-watch', 'alert-warning', 'alert-advisory');

            // Set alert level and style
            switch (level?.toLowerCase()) {
                case 'warning':
                    alertElement.classList.add('alert-warning');
                    alertText.textContent = 'Storm Warning Active';
                    break;
                case 'watch':
                    alertElement.classList.add('alert-watch');
                    alertText.textContent = 'Storm Watch in Effect';
                    break;
                case 'advisory':
                    alertElement.classList.add('alert-advisory');
                    alertText.textContent = 'Weather Advisory';
                    break;
                default:
                    alertText.textContent = 'No Active Alerts';
            }
        }

        function updateStormPath(pathPoints) {
            // Remove existing path layer if any
            if (stormPathLayer) {
                map.removeLayer(stormPathLayer);
            }

            // Remove existing path markers
            pathMarkers.forEach(marker => map.removeLayer(marker));
            pathMarkers = [];

            // Create a new path layer
            var pathCoordinates = pathPoints.map(point => [point.latitude, point.longitude]);
            stormPathLayer = L.polyline(pathCoordinates, {
                color: 'red',
                weight: 3,
                opacity: 0.7
            }).addTo(map);

            // Add markers for each point
            pathPoints.forEach((point, index) => {
                var marker = L.marker([point.latitude, point.longitude])
                    .bindPopup(`Time: ${new Date(point.time).toLocaleTimeString()}<br>Intensity: ${point.intensity}%`)
                    .addTo(map);
                pathMarkers.push(marker);
            });

            // Fit the map to show the entire path
            map.fitBounds(stormPathLayer.getBounds());
        }

        function updateWeatherOverlay(data) {
            // Remove existing weather layer if any
            if (weatherLayer) {
                map.removeLayer(weatherLayer);
            }

            // Add new weather layer with updated data
            weatherLayer = L.tileLayer('https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=@ViewBag.OpenWeatherMapApiKey', {
                maxZoom: 19,
                attribution: '© OpenWeatherMap',
                opacity: 0.5
            }).addTo(map);
        }

        // Initialize the map when the page loads
        window.onload = initMap;

        // Clean up interval when page is unloaded
        window.onunload = () => {
            if (updateInterval) {
                clearInterval(updateInterval);
            }
        };
    </script>
}
