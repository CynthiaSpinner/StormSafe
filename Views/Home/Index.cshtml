@{
    ViewData["Title"] = "StormSafe - Weather Radar";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        .map-container {
            height: 500px;
            width: 100%;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .user-location-marker {
            width: 20px;
            height: 20px;
            background-color: #4CAF50;
            border: 2px solid white;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .storm-location-marker {
            width: 24px;
            height: 24px;
            background-color: #ff4444;
            border: 2px solid white;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }

            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .storm-info {
            transition: opacity 0.3s ease;
        }

        .storm-info.updating {
            opacity: 0.7;
        }

        .alert-level {
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1rem;
        }

        .alert-warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .info-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .info-label {
            font-weight: bold;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .info-value {
            font-size: 1.1rem;
            color: #333;
        }

        .predicted-path {
            stroke-dasharray: 5, 10;
            animation: dash 30s linear infinite;
        }

        @@keyframes dash {
            to {
                stroke-dashoffset: -1000;
            }
        }
    </style>
}

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Live Radar</h3>
            </div>
            <div class="card-body p-0">
                <div id="radar-container" style="height: 400px; background-color: #f8f9fa;">
                    <div id="map" style="height: 100%; width: 100%;"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Storm Information</h3>
            </div>
            <div class="card-body">
                <div id="storm-info">
                    <!-- Alert Level -->
                    <div class="alert-level" id="alert-level">
                        <span id="alert-text">No Active Alerts</span>
                    </div>

                    <!-- Storm Type and Description -->
                    <div class="storm-info-card">
                        <h5>Storm Type</h5>
                        <p id="storm-type" class="info-value">--</p>
                        <p id="storm-description" class="text-muted small">--</p>
                    </div>

                    <!-- Movement Information -->
                    <div class="storm-info-card">
                        <h5>Movement</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Speed</p>
                                <p id="storm-speed" class="info-value">-- mph</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Direction</p>
                                <p id="storm-direction" class="info-value">--°</p>
                            </div>
                        </div>
                    </div>

                    <!-- Wind Information -->
                    <div class="storm-info-card">
                        <h5>Wind Conditions</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Wind Speed</p>
                                <p id="wind-speed" class="info-value">-- mph</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Wind Gusts</p>
                                <p id="wind-gust" class="info-value">-- mph</p>
                            </div>
                        </div>
                    </div>

                    <!-- Precipitation -->
                    <div class="storm-info-card">
                        <h5>Precipitation</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Rate</p>
                                <p id="precipitation-rate" class="info-value">-- in/hr</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Visibility</p>
                                <p id="visibility" class="info-value">-- mi</p>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Hazards -->
                    <div class="storm-info-card">
                        <h5>Additional Hazards</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Hail Size</p>
                                <p id="hail-size" class="info-value">-- in</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Lightning</p>
                                <p id="lightning-status" class="info-value">--</p>
                            </div>
                        </div>
                    </div>

                    <!-- Arrival Information -->
                    <div class="storm-info-card">
                        <h5>Arrival Information</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Distance</p>
                                <p id="storm-distance" class="info-value">-- mi</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">ETA</p>
                                <p id="arrival-time" class="info-value">--:--</p>
                            </div>
                        </div>
                    </div>

                    <!-- Storm Intensity -->
                    <div class="storm-info-card">
                        <h5>Storm Intensity</h5>
                        <div class="progress">
                            <div id="storm-intensity" class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let userMarker;
        let stormMarker;
        let pathLine;

        function initMap() {
            // Initialize the map centered on the US
            map = L.map('map').setView([40.7128, -74.0060], 8);

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Try to get user's location
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;

                        // Add user location marker
                        userMarker = L.marker([userLat, userLng], {
                            icon: L.divIcon({
                                className: 'user-marker',
                                html: '<div class="user-location-marker"></div>',
                                iconSize: [20, 20]
                            })
                        }).addTo(map);

                        // Center map on user's location
                        map.setView([userLat, userLng], 10);

                        // Fetch initial storm data
                        updateStormData(userLat, userLng);
                    },
                    error => {
                        console.error('Error getting location:', error);
                        // Default to New York if location access is denied
                        updateStormData(40.7128, -74.0060);
                    }
                );
            } else {
                console.error('Geolocation is not supported by this browser.');
                // Default to New York if geolocation is not supported
                updateStormData(40.7128, -74.0060);
            }

            // Set up periodic updates (every 5 minutes)
            setInterval(() => {
                if (userMarker) {
                    const userLatLng = userMarker.getLatLng();
                    updateStormData(userLatLng.lat, userLatLng.lng);
                }
            }, 300000); // 5 minutes in milliseconds
        }

        function updateStormData(latitude, longitude) {
            // Show loading state
            document.querySelector('.storm-info').classList.add('updating');

            fetch(`/api/weather/storm-data?latitude=${latitude}&longitude=${longitude}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Update storm information
                    updateStormInfo(data);

                    // Update map with storm location and path
                    updateStormOnMap(data);
                })
                .catch(error => {
                    console.error('Error fetching storm data:', error);
                    document.getElementById('error-message').textContent =
                        'Error fetching storm data. Please try again later.';
                })
                .finally(() => {
                    // Remove loading state
                    document.querySelector('.storm-info').classList.remove('updating');
                });
        }

        function updateStormOnMap(data) {
            // Remove existing storm marker and path if they exist
            if (stormMarker) {
                map.removeLayer(stormMarker);
            }
            if (pathLine) {
                map.removeLayer(pathLine);
            }

            // Add current storm location marker
            stormMarker = L.marker([data.latitude, data.longitude], {
                icon: L.divIcon({
                    className: 'storm-marker',
                    html: '<div class="storm-location-marker"></div>',
                    iconSize: [24, 24]
                })
            }).addTo(map);

            // Create path line if we have predicted path points
            if (data.predictedPath && data.predictedPath.length > 0) {
                const pathPoints = data.predictedPath.map(point => [point.latitude, point.longitude]);

                // Add the current location as the first point
                pathPoints.unshift([data.latitude, data.longitude]);

                pathLine = L.polyline(pathPoints, {
                    color: '#ff4444',
                    weight: 3,
                    opacity: 0.7,
                    dashArray: '5, 10'
                }).addTo(map);

                // Fit the map to show both the storm and its predicted path
                const bounds = L.latLngBounds(pathPoints);
                map.fitBounds(bounds, { padding: [50, 50] });
            }
        }

        function updateStormInfo(data) {
            // Update alert level
            updateAlertLevel(data.alertLevel);

            // Update basic storm information
            document.getElementById('storm-type').textContent = data.stormType;
            document.getElementById('storm-movement').textContent =
                `Moving ${data.direction}° at ${data.speed.toFixed(1)} mph`;
            document.getElementById('storm-intensity').textContent =
                `Intensity: ${data.intensity.toFixed(1)}`;

            // Update wind information
            document.getElementById('wind-speed').textContent =
                `${data.windSpeed.toFixed(1)} mph`;
            document.getElementById('wind-gust').textContent =
                data.windGust > 0 ? `${data.windGust.toFixed(1)} mph` : 'None';
            document.getElementById('wind-direction').textContent =
                `${data.direction}°`;

            // Update precipitation
            document.getElementById('precipitation-rate').textContent =
                data.precipitationRate > 0 ?
                    `${data.precipitationRate.toFixed(2)} in/hr` : 'None';

            // Update additional hazards
            document.getElementById('hail-size').textContent =
                data.hailSize > 0 ? `${data.hailSize.toFixed(1)} in` : 'None';
            document.getElementById('lightning').textContent =
                data.hasLightning ? 'Detected' : 'None';
            document.getElementById('visibility').textContent =
                `${data.visibility.toFixed(1)} miles`;

            // Update arrival information
            const arrivalTime = new Date(data.estimatedArrivalTime);
            document.getElementById('estimated-arrival').textContent =
                arrivalTime.toLocaleTimeString();
            document.getElementById('distance-to-storm').textContent =
                data.distanceToUser > 0 ?
                    `${data.distanceToUser.toFixed(1)} miles` : 'Calculating...';
        }

        function updateAlertLevel(level) {
            const alertElement = document.getElementById('alert-level');
            alertElement.textContent = level;

            // Remove all alert level classes
            alertElement.classList.remove('alert-warning', 'alert-danger', 'alert-info');

            // Add the appropriate class based on the alert level
            switch (level.toLowerCase()) {
                case 'warning':
                    alertElement.classList.add('alert-warning');
                    break;
                case 'danger':
                case 'severe':
                    alertElement.classList.add('alert-danger');
                    break;
                default:
                    alertElement.classList.add('alert-info');
            }
        }

        // Initialize the map when the page loads
        document.addEventListener('DOMContentLoaded', initMap);
    </script>
}
