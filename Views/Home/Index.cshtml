@{
    ViewData["Title"] = "StormSafe - Weather Radar";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <style>
        .map-container {
            position: relative;
            width: 100%;
            height: 500px;
            min-height: 500px;
            background-color: #f8f9fa;
        }

        #map {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }

        .radar-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            opacity: 0.7;
            pointer-events: none;
            display: none;
        }

        .radar-controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
            background: white;
            padding: 10px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            pointer-events: auto;
        }

        .radar-controls .form-range {
            width: 150px;
        }

        .radar-image-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            pointer-events: none;
        }

        .radar-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transform-origin: center center;
            pointer-events: none;
        }

        .loading-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 255, 255, 0.9);
            padding: 10px 20px;
            border-radius: 4px;
            display: none;
            align-items: center;
            gap: 10px;
            z-index: 3;
        }

        .error-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 255, 255, 0.9);
            padding: 10px 20px;
            border-radius: 4px;
            display: none;
            align-items: center;
            gap: 10px;
            color: #dc3545;
            z-index: 3;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .user-location-marker {
            width: 20px;
            height: 20px;
            background-color: #4CAF50;
            border: 2px solid white;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .storm-location-marker {
            width: 24px;
            height: 24px;
            background-color: #ff4444;
            border: 2px solid white;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }

            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .storm-info {
            transition: opacity 0.3s ease;
        }

        .storm-info.updating {
            opacity: 0.7;
        }

        .alert-level {
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1rem;
        }

        .alert-warning {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-info {
            background-color: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .info-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .info-label {
            font-weight: bold;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .info-value {
            font-size: 1.1rem;
            color: #333;
        }

        .predicted-path {
            stroke-dasharray: 5, 10;
            animation: dash 30s linear infinite;
        }

        @@keyframes dash {
            to {
                stroke-dashoffset: -1000;
            }
        }

        .leaflet-control-locate {
            z-index: 1000 !important;
            pointer-events: auto !important;
            background: white !important;
            padding: 5px !important;
            border-radius: 4px !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2) !important;
            margin-top: 10px !important;
            margin-left: 10px !important;
            position: relative !important;
        }

        .leaflet-control-zoom {
            z-index: 1000 !important;
            margin-top: 10px !important;
            margin-left: 10px !important;
            position: relative !important;
        }

        .leaflet-control-radar {
            z-index: 1000 !important;
            margin-top: 10px !important;
            margin-right: 10px !important;
            position: relative !important;
        }

        .leaflet-control-container {
            z-index: 1000 !important;
            pointer-events: auto !important;
        }

        .leaflet-top,
        .leaflet-bottom {
            z-index: 1000 !important;
        }

        .leaflet-control {
            z-index: 1000 !important;
        }

        .nexrad-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            opacity: 0.7;
            pointer-events: none;
            display: none;
        }

        .nexrad-controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
            background: white;
            padding: 10px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            pointer-events: auto;
            min-width: 200px;
        }

        .nexrad-controls .form-range {
            width: 100%;
        }
    </style>
}

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h3 class="mb-0">Live Radar</h3>
                <div class="d-flex gap-2">
                    <button class="btn btn-light btn-sm" id="locate-button">
                        <i class="fas fa-location-arrow"></i> Use My Location
                    </button>
                    <button class="btn btn-light btn-sm" id="nexrad-button">
                        <i class="fas fa-radar"></i> Show NEXRAD
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="map-container">
                    <div id="map"></div>
                    <div id="nexrad-container" class="nexrad-overlay">
                        <div class="nexrad-controls">
                            <div class="mb-2">
                                <label for="nexrad-opacity" class="form-label">Opacity</label>
                                <input type="range" class="form-range" id="nexrad-opacity" min="0" max="100" value="70">
                            </div>
                            <div class="mb-2">
                                <label for="nexrad-product" class="form-label">Product</label>
                                <select class="form-select" id="nexrad-product">
                                    <option value="N0R">Base Reflectivity (N0R)</option>
                                    <option value="N0S">Storm Relative Motion (N0S)</option>
                                    <option value="N0V">Velocity (N0V)</option>
                                    <option value="N0C">Composite Reflectivity (N0C)</option>
                                    <option value="N0H">Hybrid Scan Reflectivity (N0H)</option>
                                    <option value="bref_qcd">Base Reflectivity Quick Color Display</option>
                                </select>
                            </div>
                            <div class="mb-2">
                                <label for="nexrad-site" class="form-label">Radar Site</label>
                                <select class="form-select" id="nexrad-site">
                                    <option value="auto">Auto (Nearest)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div id="loading-indicator" class="loading-indicator">
                        <div class="spinner"></div>
                        <span>Loading radar...</span>
                    </div>
                    <div id="error-message" class="error-message">
                        <i class="fas fa-exclamation-circle"></i>
                        <span>Error loading radar image</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Storm Information</h3>
            </div>
            <div class="card-body">
                <div id="storm-info" class="storm-info">
                    <!-- Loading Indicator -->
                    <div id="storm-loading-indicator" class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading storm data...</p>
                    </div>

                    <!-- Error Message -->
                    <div id="storm-error-message" class="alert alert-danger d-none" role="alert">
                        Error loading storm data. Please try again later.
                    </div>

                    <!-- Alert Level -->
                    <div class="alert-level" id="alert-level">
                        <span id="alert-text">No Active Alerts</span>
                    </div>

                    <!-- Storm Type and Description -->
                    <div class="info-card">
                        <h5>Storm Type</h5>
                        <p id="storm-type" class="info-value">--</p>
                        <p id="storm-description" class="text-muted small">--</p>
                    </div>

                    <!-- Movement Information -->
                    <div class="info-card">
                        <h5>Movement</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Speed</p>
                                <p id="storm-speed" class="info-value">-- mph</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Direction</p>
                                <p id="storm-direction" class="info-value">--°</p>
                            </div>
                        </div>
                    </div>

                    <!-- Wind Information -->
                    <div class="info-card">
                        <h5>Wind Conditions</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Wind Speed</p>
                                <p id="wind-speed" class="info-value">-- mph</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Wind Gusts</p>
                                <p id="wind-gust" class="info-value">-- mph</p>
                            </div>
                        </div>
                    </div>

                    <!-- Precipitation -->
                    <div class="info-card">
                        <h5>Precipitation</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Rate</p>
                                <p id="precipitation-rate" class="info-value">-- in/hr</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Visibility</p>
                                <p id="visibility" class="info-value">-- mi</p>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Hazards -->
                    <div class="info-card">
                        <h5>Additional Hazards</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Hail Size</p>
                                <p id="hail-size" class="info-value">-- in</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">Lightning</p>
                                <p id="lightning-status" class="info-value">--</p>
                            </div>
                        </div>
                    </div>

                    <!-- Arrival Information -->
                    <div class="info-card">
                        <h5>Arrival Information</h5>
                        <div class="row">
                            <div class="col-6">
                                <p class="info-label">Distance</p>
                                <p id="storm-distance" class="info-value">-- mi</p>
                            </div>
                            <div class="col-6">
                                <p class="info-label">ETA</p>
                                <p id="arrival-time" class="info-value">--:--</p>
                            </div>
                        </div>
                    </div>

                    <!-- Storm Intensity -->
                    <div class="info-card">
                        <h5>Storm Intensity</h5>
                        <div class="progress">
                            <div id="storm-intensity" class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        let map;
        let userMarker;
        let stormMarker;
        let pathLine;
        let radarContainer;
        let mapInitialized = false;

        function initMap() {
            console.log('Initializing map...');

            // Check if map container exists
            const mapContainer = document.getElementById('map');
            if (!mapContainer) {
                console.error('Map container not found');
                return;
            }

            try {
                // Initialize the map with explicit options
                map = L.map('map', {
                    center: [39.8283, -98.5795], // Center of US
                    zoom: 4,
                    minZoom: 4,
                    maxZoom: 18,
                    zoomControl: true
                });

                // Add OpenStreetMap tiles
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);

                // Add location button handler
                const locateButton = document.getElementById('locate-button');
                if (locateButton) {
                    locateButton.addEventListener('click', function () {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(
                                function (position) {
                                    const lat = position.coords.latitude;
                                    const lng = position.coords.longitude;
                                    map.setView([lat, lng], 10);
                                    updateStormData(lat, lng);
                                },
                                function (error) {
                                    console.error('Error getting location:', error);
                                    alert('Unable to get your location. Please enable location services and try again.');
                                }
                            );
                        } else {
                            alert('Geolocation is not supported by your browser.');
                        }
                    });
                }

                mapInitialized = true;
                console.log('Map initialized successfully');

                // Initialize NEXRAD controls after map is ready
                setTimeout(initializeNEXRAD, 100);
            } catch (error) {
                console.error('Error initializing map:', error);
                setTimeout(initMap, 1000);
            }
        }

        function handleRadarImageError(img) {
            console.error('Error loading radar image:', img.src);
            document.getElementById('radar-loading').classList.add('d-none');
            document.getElementById('radar-error').classList.remove('d-none');
        }

        function updateRadarImage(radarUrl) {
            const radarImage = document.getElementById('radar-image');
            const loadingIndicator = document.getElementById('loading-indicator');
            const errorMessage = document.getElementById('error-message');
            const radarContainer = document.getElementById('radar-container');

            if (!radarImage || !loadingIndicator || !errorMessage || !radarContainer) {
                console.error('Required elements not found');
                return;
            }

            // Show loading indicator
            loadingIndicator.style.display = 'flex';
            errorMessage.style.display = 'none';
            radarImage.style.display = 'none';

            // Add timestamp to prevent caching
            const timestamp = new Date().getTime();
            const urlWithTimestamp = `${radarUrl}?t=${timestamp}`;

            radarImage.onload = function () {
                loadingIndicator.style.display = 'none';
                radarImage.style.display = 'block';
                fitRadarToMap();
            };

            radarImage.onerror = function () {
                loadingIndicator.style.display = 'none';
                errorMessage.style.display = 'flex';
                console.error('Error loading radar image:', urlWithTimestamp);
            };

            radarImage.src = urlWithTimestamp;
        }

        function fitRadarToMap() {
            const radarImage = document.getElementById('radar-image');
            if (!radarImage || !map) return;

            // Get the current map bounds and zoom level
            const bounds = map.getBounds();
            const zoom = map.getZoom();
            const ne = bounds.getNorthEast();
            const sw = bounds.getSouthWest();

            // Calculate the scale needed to cover the map
            const mapWidth = ne.lng - sw.lng;
            const mapHeight = ne.lat - sw.lat;

            // Calculate the scale factor based on zoom level
            const baseZoom = 4;
            const scaleFactor = Math.pow(2, zoom - baseZoom);

            // Set the radar image size and position
            radarImage.style.width = `${100 * scaleFactor}%`;
            radarImage.style.height = `${100 * scaleFactor}%`;
            radarImage.style.objectFit = 'cover';
            radarImage.style.transform = 'none';

            // Calculate the center offset based on zoom level
            const centerOffset = (scaleFactor - 1) * 50;
            radarImage.style.marginLeft = `-${centerOffset}%`;
            radarImage.style.marginTop = `-${centerOffset}%`;

            // Ensure the radar image stays centered
            radarImage.style.position = 'absolute';
            radarImage.style.left = '50%';
            radarImage.style.top = '50%';
            radarImage.style.transform = `translate(-50%, -50%) scale(${scaleFactor})`;
        }

        // Add map move and zoom handlers
        function addMapEventListeners() {
            map.on('moveend', fitRadarToMap);
            map.on('zoomend', fitRadarToMap);
            map.on('zoomstart', fitRadarToMap);

            // Add radar control event listeners
            document.getElementById('radar-toggle').addEventListener('change', function (e) {
                const radarContainer = document.getElementById('radar-container');
                if (e.target.checked) {
                    radarContainer.style.display = 'block';
                    // Center map on US when radar is shown
                    map.setView([39.8283, -98.5795], 4);
                    // Fit radar to map
                    fitRadarToMap();
                } else {
                    radarContainer.style.display = 'none';
                }
            });

            document.getElementById('radar-opacity').addEventListener('input', function (e) {
                const radarContainer = document.getElementById('radar-container');
                radarContainer.style.opacity = e.target.value / 100;
            });

            document.getElementById('radar-type').addEventListener('change', function (e) {
                // Update radar URL based on selected type
                const radarType = e.target.value;
                const radarUrl = getRadarUrl(radarType);
                updateRadarImage(radarUrl);
            });
        }

        function getRadarUrl(type) {
            const baseUrl = 'https://radar.weather.gov/ridge/standard';
            switch (type) {
                case 'composite':
                    return `${baseUrl}/CONUS_loop.gif`;
                case 'precipitation':
                    return `${baseUrl}/CONUS_Precip_loop.gif`;
                default:
                    return `${baseUrl}/CONUS_loop.gif`;
            }
        }

        function updateStormData(latitude, longitude) {
            const loadingIndicator = document.getElementById('loading-indicator');
            const errorMessage = document.getElementById('error-message');
            const stormInfo = document.getElementById('storm-info');

            if (!loadingIndicator || !errorMessage || !stormInfo) {
                console.error('Required elements not found');
                return;
            }

            loadingIndicator.style.display = 'flex';
            errorMessage.style.display = 'none';
            stormInfo.classList.add('updating');

            // Get the nearest radar station
            fetch(`https://api.weather.gov/points/${latitude},${longitude}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Get the radar station ID
                    const radarStation = data.properties.radarStation;
                    currentStationIndex = nexradStations.indexOf(radarStation);
                    if (currentStationIndex === -1) {
                        currentStationIndex = 0; // Default to first station if not found
                    }

                    // Update NEXRAD layer with the correct station
                    updateNEXRADLayer();

                    // Get radar data for the station
                    return fetch(`https://api.weather.gov/radar/stations/${radarStation}`);
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    loadingIndicator.style.display = 'none';
                    stormInfo.classList.remove('updating');

                    // Update storm information based on radar data
                    const properties = data.properties;
                    const isStorm = properties.hasPrecipitation || properties.hasHail || properties.hasTornado;

                    if (isStorm) {
                        stormInfo.innerHTML = `
                                                                                                                                        <div class="alert alert-danger">
                                                                                                                                            <h5 class="alert-heading">Storm Alert!</h5>
                                                                                                                                            <p>Radar Station: ${properties.stationIdentifier}</p>
                                                                                                                                            <p>Last Update: ${new Date(properties.lastUpdate).toLocaleString()}</p>
                                                                                                                                            <p>Precipitation: ${properties.hasPrecipitation ? 'Yes' : 'No'}</p>
                                                                                                                                            <p>Hail: ${properties.hasHail ? 'Yes' : 'No'}</p>
                                                                                                                                            <p>Tornado: ${properties.hasTornado ? 'Yes' : 'No'}</p>
                                                                                                                                        </div>
                                                                                                                                    `;
                    } else {
                        stormInfo.innerHTML = `
                                                                                                                                        <div class="alert alert-success">
                                                                                                                                            <h5 class="alert-heading">No Storm Detected</h5>
                                                                                                                                            <p>Current conditions are safe.</p>
                                                                                                                                            <p>Last Update: ${new Date(properties.lastUpdate).toLocaleString()}</p>
                                                                                                                                        </div>
                                                                                                                                    `;
                    }
                })
                .catch(error => {
                    console.error('Error fetching storm data:', error);
                    loadingIndicator.style.display = 'none';
                    errorMessage.style.display = 'flex';
                    stormInfo.classList.remove('updating');
                });
        }

        // NEXRAD Layer
        let nexradLayer = null;
        let nexradStations = [];
        let currentStationIndex = 0;
        let retryCount = 0;
        const maxRetries = 3;
        const retryDelay = 5000; // 5 seconds delay between retries

        function updateNEXRADLayer() {
            if (!map) return;

            const product = document.getElementById('nexrad-product')?.value || 'N0R';
            const opacity = document.getElementById('nexrad-opacity')?.value || 70;
            const zoom = map.getZoom();

            // Don't show radar if zoomed out too far
            if (zoom < 4) {
                console.log('Zoom level too low for radar display');
                return;
            }

            // Get the current map bounds
            const bounds = map.getBounds();
            const center = bounds.getCenter();

            // Find the nearest radar station
            const nearestStation = findNearestRadarStation(center.lat, center.lng);
            console.log('Using nearest radar station:', nearestStation);

            // Create URL for the radar image based on product type
            let url;
            if (product === 'bref_qcd') {
                // For bref_qcd, use the NWS radar tile service
                const timestamp = new Date().getTime();
                url = `https://radar.weather.gov/ridge/tiles/${nearestStation}/${product}/${timestamp}/{{z}}/{{x}}/{{y}}.png`;
            } else {
                // For standard NEXRAD products
                url = `https://radar.weather.gov/ridge/standard/${nearestStation}_${product}_0.gif`;
            }
            console.log('Fetching radar image from:', url);

            // Create the image overlay with adjusted bounds based on zoom level
            const adjustedBounds = L.latLngBounds(
                L.latLng(center.lat - (1 / Math.pow(2, zoom - 4)), center.lng - (1 / Math.pow(2, zoom - 4))),
                L.latLng(center.lat + (1 / Math.pow(2, zoom - 4)), center.lng + (1 / Math.pow(2, zoom - 4)))
            );

            // Create the image overlay with error handling
            const img = new Image();
            img.crossOrigin = "anonymous"; // Add CORS support
            img.onload = function () {
                if (nexradLayer) {
                    map.removeLayer(nexradLayer);
                }
                nexradLayer = L.imageOverlay(url, adjustedBounds, {
                    opacity: opacity / 100,
                    interactive: false,
                    zIndex: 2
                });
                nexradLayer.addTo(map);
                console.log('Successfully added radar layer for station:', nearestStation);
                retryCount = 0;
            };

            img.onerror = function () {
                console.error('Error loading radar image:', url);
                if (retryCount < maxRetries) {
                    retryCount++;
                    console.log(`Retrying in ${retryDelay / 1000} seconds... (Attempt ${retryCount}/${maxRetries})`);
                    setTimeout(updateNEXRADLayer, retryDelay);
                } else {
                    console.error('Max retries reached. Could not load radar image.');
                    // Try a fallback station if available
                    const fallbackStation = findFallbackStation(center.lat, center.lng, nearestStation);
                    if (fallbackStation) {
                        console.log('Trying fallback station:', fallbackStation);
                        const fallbackUrl = product === 'bref_qcd'
                            ? `https://radar.weather.gov/ridge/tiles/${fallbackStation}/${product}/${new Date().getTime()}/{{z}}/{{x}}/{{y}}.png`
                            : `https://radar.weather.gov/ridge/standard/${fallbackStation}_${product}_0.gif`;
                        img.src = fallbackUrl;
                    }
                }
            };

            img.src = url;
        }

        function findNearestRadarStation(lat, lng) {
            // List of radar stations with their coordinates
            const stations = [
                // Northeast
                { id: 'KOKX', lat: 40.8656, lng: -72.8644 }, // Upton, NY
                { id: 'KDOX', lat: 38.8256, lng: -75.4400 }, // Dover, DE
                { id: 'KBOX', lat: 41.9559, lng: -71.1370 }, // Boston, MA
                { id: 'KGYX', lat: 43.8913, lng: -70.2563 }, // Portland, ME
                { id: 'KBUF', lat: 42.9488, lng: -78.7369 }, // Buffalo, NY
                { id: 'KALY', lat: 42.7483, lng: -73.8028 }, // Albany, NY

                // Southeast
                { id: 'KMOB', lat: 30.6047, lng: -87.1108 }, // Mobile, AL
                { id: 'KTLH', lat: 30.3975, lng: -84.3289 }, // Tallahassee, FL
                { id: 'KAMX', lat: 25.6106, lng: -80.4131 }, // Miami, FL
                { id: 'KCLX', lat: 32.6555, lng: -81.0422 }, // Charleston, SC

                // Midwest
                { id: 'KCLE', lat: 41.4131, lng: -81.8597 }, // Cleveland, OH
                { id: 'KPBZ', lat: 40.5317, lng: -80.2178 }, // Pittsburgh, PA
                { id: 'KIND', lat: 39.7075, lng: -86.2803 }, // Indianapolis, IN
                { id: 'KIWX', lat: 41.3586, lng: -85.7000 }, // Northern Indiana

                // South
                { id: 'KHGX', lat: 29.4719, lng: -95.0789 }, // Houston, TX
                { id: 'KEWX', lat: 29.7036, lng: -98.0283 }, // San Antonio, TX
                { id: 'KDFX', lat: 29.2728, lng: -100.2803 }, // Laughlin AFB, TX
                { id: 'KLZK', lat: 34.8364, lng: -92.2619 }, // Little Rock, AR

                // West
                { id: 'KSOX', lat: 33.8177, lng: -117.6360 }, // Santa Ana Mts, CA
                { id: 'KVTX', lat: 34.4117, lng: -119.1786 }, // Los Angeles, CA
                { id: 'KEYX', lat: 35.0978, lng: -117.5607 }, // Edwards AFB, CA
                { id: 'KMTX', lat: 41.2628, lng: -112.4478 }  // Salt Lake City, UT
            ];

            // Find the nearest station
            let nearest = stations[0];
            let minDistance = Number.MAX_VALUE;

            for (const station of stations) {
                const distance = Math.sqrt(
                    Math.pow(station.lat - lat, 2) +
                    Math.pow(station.lng - lng, 2)
                );
                if (distance < minDistance) {
                    minDistance = distance;
                    nearest = station;
                }
            }

            return nearest.id;
        }

        function findFallbackStation(lat, lng, currentStation) {
            const stations = [
                // Northeast
                { id: 'KOKX', lat: 40.8656, lng: -72.8644 }, // Upton, NY
                { id: 'KDOX', lat: 38.8256, lng: -75.4400 }, // Dover, DE
                { id: 'KBOX', lat: 41.9559, lng: -71.1370 }, // Boston, MA
                { id: 'KGYX', lat: 43.8913, lng: -70.2563 }, // Portland, ME
                { id: 'KBUF', lat: 42.9488, lng: -78.7369 }, // Buffalo, NY
                { id: 'KALY', lat: 42.7483, lng: -73.8028 }, // Albany, NY

                // Southeast
                { id: 'KMOB', lat: 30.6047, lng: -87.1108 }, // Mobile, AL
                { id: 'KTLH', lat: 30.3975, lng: -84.3289 }, // Tallahassee, FL
                { id: 'KAMX', lat: 25.6106, lng: -80.4131 }, // Miami, FL
                { id: 'KCLX', lat: 32.6555, lng: -81.0422 }, // Charleston, SC

                // Midwest
                { id: 'KCLE', lat: 41.4131, lng: -81.8597 }, // Cleveland, OH
                { id: 'KPBZ', lat: 40.5317, lng: -80.2178 }, // Pittsburgh, PA
                { id: 'KIND', lat: 39.7075, lng: -86.2803 }, // Indianapolis, IN
                { id: 'KIWX', lat: 41.3586, lng: -85.7000 }, // Northern Indiana

                // South
                { id: 'KHGX', lat: 29.4719, lng: -95.0789 }, // Houston, TX
                { id: 'KEWX', lat: 29.7036, lng: -98.0283 }, // San Antonio, TX
                { id: 'KDFX', lat: 29.2728, lng: -100.2803 }, // Laughlin AFB, TX
                { id: 'KLZK', lat: 34.8364, lng: -92.2619 }, // Little Rock, AR

                // West
                { id: 'KSOX', lat: 33.8177, lng: -117.6360 }, // Santa Ana Mts, CA
                { id: 'KVTX', lat: 34.4117, lng: -119.1786 }, // Los Angeles, CA
                { id: 'KEYX', lat: 35.0978, lng: -117.5607 }, // Edwards AFB, CA
                { id: 'KMTX', lat: 41.2628, lng: -112.4478 }  // Salt Lake City, UT
            ];

            // Find the next closest station that's not the current one
            let nearest = null;
            let minDistance = Number.MAX_VALUE;

            for (const station of stations) {
                if (station.id === currentStation) continue;

                const distance = Math.sqrt(
                    Math.pow(station.lat - lat, 2) +
                    Math.pow(station.lng - lng, 2)
                );
                if (distance < minDistance) {
                    minDistance = distance;
                    nearest = station.id;
                }
            }

            return nearest;
        }

        function initializeNEXRAD() {
            if (!map) return;

            // Add NEXRAD button handler
            const nexradButton = document.getElementById('nexrad-button');
            if (nexradButton) {
                nexradButton.addEventListener('click', function () {
                    const nexradContainer = document.getElementById('nexrad-container');
                    if (nexradContainer) {
                        const isVisible = nexradContainer.style.display === 'block';
                        nexradContainer.style.display = isVisible ? 'none' : 'block';
                        if (!isVisible) {
                            updateNEXRADLayer();
                        }
                    }
                });
            }

            // Add opacity control handler
            const opacityControl = document.getElementById('nexrad-opacity');
            if (opacityControl) {
                opacityControl.addEventListener('input', function (e) {
                    const nexradContainer = document.getElementById('nexrad-container');
                    if (nexradContainer) {
                        nexradContainer.style.opacity = e.target.value / 100;
                    }
                });
            }

            // Add product type handler
            const productControl = document.getElementById('nexrad-product');
            if (productControl) {
                productControl.addEventListener('change', function () {
                    updateNEXRADLayer();
                });
            }

            // Add radar site handler
            const siteControl = document.getElementById('nexrad-site');
            if (siteControl) {
                siteControl.addEventListener('change', function () {
                    updateNEXRADLayer();
                });
            }
        }

        // Add map move and zoom handlers for NEXRAD
        function addMapEventListeners() {
            if (!map) return;

            map.on('moveend', function () {
                if (document.getElementById('nexrad-container')?.style.display === 'block') {
                    updateNEXRADLayer();
                }
            });

            map.on('zoomend', function () {
                if (document.getElementById('nexrad-container')?.style.display === 'block') {
                    updateNEXRADLayer();
                }
            });
        }

        // Initialize the map when the page loads
        document.addEventListener('DOMContentLoaded', function () {
            // Ensure Leaflet is loaded
            if (typeof L === 'undefined') {
                console.error('Leaflet not loaded');
                return;
            }

            // Initialize map
            initMap();

            // Set up periodic health check
            setInterval(function () {
                if (!mapInitialized) {
                    console.log('Map not initialized, attempting to recover...');
                    initMap();
                } else if (!map) {
                    console.log('Map instance not found, attempting to recover...');
                    initMap();
                }
            }, 5000);
        });
    </script>
}
